{"version":3,"sources":["Header.js","Result.js","Main.js","Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","useState","searchTerm","setSearchTerm","className","onChange","event","target","value","onKeyPress","key","getData","id","type","onClick","Result","result","href","url","title","points","author","Main","console","log","searchResults","hits","map","objectID","Loader","loading","size","duration","colors","strings","typeSpeed","backSpeed","App","setLoading","setSearchResults","useEffect","searchQuery","a","fetch","encodeURI","cache","response","ok","json","jsonResponse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQA8BeA,MA5Bf,SAAiBC,GACb,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACI,yBAAQC,UAAU,aAAlB,UACI,mBAAGA,UAAU,YAAb,yBACA,uBACIC,SAdS,SAACC,GAClBH,EAAcG,EAAMC,OAAOC,QAcnBC,WAXc,SAACH,GACN,UAAdA,EAAMI,KACLV,EAAMW,QAAQT,IAUVU,GAAG,cACHC,KAAK,OACLL,MAAON,IAEX,wBAAQY,QAAS,kBAAMd,EAAMW,QAAQT,IAArC,wBCfGa,MARf,YAA4B,IAAVC,EAAS,EAATA,OACd,OACI,qBAAIZ,UAAU,aAAd,UAA2B,mBAAGA,UAAU,QAAQa,KAAMD,EAAOE,IAAlC,SAAwCF,EAAOG,QAC1E,oBAAGf,UAAU,UAAb,oBAA+BY,EAAOI,OAAtC,QAAmDJ,EAAOK,cCcnDC,MAhBf,SAActB,GAEZ,OADAuB,QAAQC,IAAIxB,GAEV,+BACE,qBAAII,UAAU,UAAd,UACGJ,EAAMyB,cAAcC,KAAKC,KAAI,SAACX,GAC7B,OAAO,cAAC,EAAD,CAAQA,OAAQA,GAAaA,EAAOY,aAE7C,mBAAGxB,UAAU,UAAUa,KAAK,IAA5B,wB,iCCgBSY,MAtBjB,WASI,OACE,sBAAKzB,UAAU,SAAf,UACI,cAAC,oBAAD,eATc,CAClB0B,SAAS,EACTC,KAAM,IACNC,SAAU,EACVC,OAAQ,CAAC,UAAW,UAAW,cAM3B,cAAC,IAAD,CACE7B,UAAU,cACV8B,QAAS,CAAC,cACVC,UAAW,GACXC,UAAW,QC+BRC,MA5Cf,WACE,MAA6BpC,oBAAU,GAAvC,mBAAM6B,EAAN,KAAeQ,EAAf,KAEA,EAA0CrC,mBACxC,IADF,mBAAOwB,EAAP,KAAsBc,EAAtB,KAIAC,qBACE,WACE7B,EAAQ,UACP,IAGL,IAEMA,EAAO,uCAAG,WAAO8B,GAAP,iBAAAC,EAAA,6DACdJ,GAAW,GADG,kBAGWK,MALf,8CAK2BC,UAAUH,GAAc,CAAEI,MAAO,aAHxD,YAGNC,EAHM,QAICC,GAJD,iCAKiBD,EAASE,OAL1B,OAKJC,EALI,OAMVV,EAAiBU,GANP,0DASZ1B,QAAQC,IAAR,MATY,QAWdc,GAAW,GAXG,0DAAH,sDAcb,OAAGR,EACM,cAAC,EAAD,IAGP,sBAAK1B,UAAU,MAAf,UACE,cAAC,EAAD,CACEO,QAASA,IAEX,cAAC,EAAD,CACEc,cAAeA,QClCRyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f2859af.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nfunction Header (props) {\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const handleChange = (event) => {\r\n        setSearchTerm(event.target.value)\r\n    }\r\n\r\n    const handleEnterSubmit = (event) => {\r\n        if(event.key === \"Enter\"){\r\n            props.getData(searchTerm)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <header className=\"App-header\">\r\n            <p className=\"headTitle\">Hacker News</p>\r\n            <input \r\n                onChange={handleChange} \r\n                onKeyPress={handleEnterSubmit} \r\n                id=\"searchField\" \r\n                type=\"text\"\r\n                value={searchTerm}\r\n                />\r\n            <button onClick={() => props.getData(searchTerm)}>Search</button>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nfunction Result ({result}) {\r\n    return(\r\n        <li className=\"contentRow\"><a className=\"title\" href={result.url}>{result.title}</a>\r\n        <p className=\"subtext\">Points {result.points}, By {result.author}</p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Result","import React from \"react\";\r\nimport Result from \"./Result\";\r\n\r\nfunction Main(props) {\r\n  console.log(props);\r\n  return (\r\n    <main>\r\n      <ol className=\"content\">\r\n        {props.searchResults.hits.map((result) => {\r\n          return <Result result={result} key={result.objectID} />;\r\n        })}\r\n        <a className=\"btnMore\" href=\"#\">\r\n          More\r\n        </a>\r\n      </ol>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","\r\nimport React from \"react\";\r\nimport { GooeyCircleLoader } from \"react-loaders-kit\";\r\nimport Typed from \"react-typed\";\r\n\r\nfunction Loader() {\r\n\r\n    const loaderProps = {\r\n      loading: true,\r\n      size: 275,\r\n      duration: 2,\r\n      colors: [\"#99fffe\", \"#f42e00\", \"#042549\"],\r\n    };\r\n  \r\n    return (\r\n      <div className=\"loader\">\r\n          <GooeyCircleLoader {...loaderProps} />\r\n          <Typed\r\n            className=\"loader-text\"\r\n            strings={[\"Loading...\"]}\r\n            typeSpeed={60}\r\n            backSpeed={0}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Loader\r\n  ","import './App.css';\r\nimport { hackernewsData } from './hackernews.js'\r\nimport React, { useEffect, useState } from 'react';\r\nimport Header from './Header'\r\nimport Main from './Main'\r\nimport Loader from './Loader'\r\n\r\n\r\nfunction App() {\r\n  const[loading, setLoading] = useState( true )\r\n\r\n  const [searchResults, setSearchResults] = useState(\r\n    \"\"\r\n    );\r\n\r\n  useEffect(\r\n    () => {\r\n      getData('news')\r\n    }, []\r\n    )\r\n\r\n  const url = 'https://hn.algolia.com/api/v1/search?query='\r\n\r\n  const getData = async (searchQuery) => {\r\n    setLoading(true)\r\n    try {\r\n      const response = await fetch(url + encodeURI(searchQuery), { cache: 'no-cache' })\r\n      if (response.ok) {\r\n        const jsonResponse = await response.json()\r\n        setSearchResults(jsonResponse)\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  if(loading){\r\n    return <Loader /> \r\n  }else return (\r\n    \r\n    <div className=\"App\">\r\n      <Header\r\n        getData={getData}\r\n      />\r\n      <Main\r\n        searchResults={searchResults}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}